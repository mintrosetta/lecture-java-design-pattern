Builder Design Pattern
    แก้ปัญหาอะไร  ?
        โดยปกติแล้ว เมื่อเราสร้างคลาสที่เป็น immutable มักจะทำให้เราต้องระบุ constructor แบบหลาย Parameters 
        เพราะเราต้องระบุข้อมูลสถานะให้กับ properties ทั้งหมดในวัตถุ (constructor ที่รับ parameters จำนวนมาก
        ถือเป็นแนวทางการเขียนโค้ดที่ไม่ดี) เมื่อไหร่ก็จามที่ parameters มีจำนวนมาก ชื่อของ parameters จะไม่มีประโยชน์
        ทันที เราจำเป็นที่จะต้องทำเอกสารเกี่ยวกับการใช้งานคลาสของเราขึ้นมา เพื่อให้นักพัฒนาคนอื่นเข้าใจด้วย

        โดย builder จะช่วยแแก้ปัญหาดังนี้
            - ทำให้ง่ายต่อการใช้งาน constructor ในการสร้างคลาสขึ้นมา
            - หลีกเลี่ยงการเขียน constructor ดังกล่างขึ้นมาตั้งแต่รกละยังคงมีวัตถุแบบ immutable ของเราอยู่

    เราควรใช้ builder ตอนไหน ?
        - เมื่อเรามีกระบวนการสร้างวัตถุที่ซับซ้อน และความซับซ้อนอาจมาจากจำนวน parameters ของ constructor
          ที่ต้องใช้ในการสร้างวัตถุ โดยเราจะลบตรรกะที่เกี่วข่องกับการสร้างวัตถุออกจากโค้ดของเรา

    UML Example
        - Product: วัตถุที่เราต้องการจะสร้าง
        - Builder: abstract class ที่มีโครงว่าการจะสร้าง project สามารถทำอะไรได้บ้างก่อนจะ build
        - ConcreteBuilder: เป็น implement ของ builder
        - Director: class ที่รู้ว่าในการสร้าง object product มี step การสร้างอย่างไร

    เราสามารุใช้งาน inner class ใน immutable class เพื่อสร้าง builder ได้

    แนะนำทให้สร้างเป็นคลาสแยก เพราะจะทำให้สามารถทำงานร่วมกับ lagacy code ได้ง่ายและสามารถเขียน test ได้ง่าย

    ข้อผิดพลาดของ design pattern นี้
        ถ้าหากเราใช้รูปแบบนี้อย่างถูกต้อง มันก็จะไม่มีข้อผิดพลาดใด ๆ
        - ไม่เหามะกับมือใหม่ เนื่องจากจำเป็นต้องใช้ method chaining ตลอด ทำให้ต้องมีความเข้าใจระดับสูง
        - เมื่อมีการเปลี่ยนแปลงที่ concrete จะต้องมีการปรับแต่ง build method

    Summary
        เมื่อใดก็ตามที่เจอสถาณการณ์ที่ constructor รับ arguments จำนวนมาก หรือ การสร้างวัตถุ
        นั้นจำเป็นต้องใช้หลายขั้นตอน เราสามารถใช้ builder design pattern เพื่อแก้ปัญหาดังกล่าวได้


Immutable 
    คือวัตถุที่สถานะหรือคุณสมบัติไม่สามารถเปลี่ยนแปลงได้หลังจากถูกสร้างขึ้น